# syntax = docker/dockerfile:1

# Robust Cal.com Web build for 32GB RAM server
ARG NODE_VERSION=20.7.0
FROM node:${NODE_VERSION}-slim AS base

# Cal.com app lives here
WORKDIR /app

# Set production environment with increased memory for 32GB server
ENV NODE_ENV="production"
ENV NODE_OPTIONS="--max-old-space-size=8192"
ENV TURBO_TELEMETRY_DISABLED=1
ENV NEXT_TELEMETRY_DISABLED=1
ENV DO_NOT_TRACK=1

# Install packages needed to build node modules and for deployment
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    build-essential \
    openssl \
    pkg-config \
    python-is-python3 \
    curl \
    git \
    ca-certificates && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Build stage
FROM base AS build

# Copy package files and yarn configuration
COPY package.json yarn.lock .yarnrc.yml ./
COPY .yarn ./.yarn

# Copy necessary config files
COPY turbo.json ./
COPY i18n.json ./
COPY i18n.lock ./
COPY vitest.config.ts ./
COPY vitest.workspace.ts ./

# Copy workspace structure for dependency resolution
COPY apps/ ./apps/
COPY packages/ ./packages/

# Install dependencies with proper Yarn 3 configuration and optimizations
# With 32GB RAM, we can use standard installation with higher memory limits
RUN yarn config set httpTimeout 1800000 && \
    yarn config set enableGlobalCache false && \
    yarn config set enableTelemetry false && \
    yarn config set enableProgressBars false && \
    yarn config set logFilters --json '[{"code":"YN0002","level":"discard"},{"code":"YN0013","level":"discard"}]' && \
    yarn config set nmMode hardlinks-local && \
    YARN_ENABLE_IMMUTABLE_INSTALLS=false NODE_OPTIONS="--max-old-space-size=8192" yarn install --inline-builds

# Build arguments for database and auth with secure defaults
ARG DATABASE_URL=postgresql://calcom:calcom123@postgres:5432/calcom
ARG DATABASE_DIRECT_URL=postgresql://calcom:calcom123@postgres:5432/calcom
ARG NEXTAUTH_SECRET=cal-easypanel-32gb-nextauth-secret-12345678901234567890123456789012
ARG NEXTAUTH_URL=https://cal.yapping.me
ARG CALENDSO_ENCRYPTION_KEY=cal-easypanel-32gb-calendso-key-12345678901234567890123456789012
ARG ENCRYPTION_KEY=cal-easypanel-32gb-encryption-key-12345678901234567890123456789012
ARG JWT_SECRET=cal-easypanel-32gb-jwt-secret-key-12345678901234567890123456789012
ARG CRON_API_KEY=cal-easypanel-32gb-cron-api-key-12345678901234567890123456789012
ARG EMAIL_FROM=noreply@localhost
ARG NEXT_PUBLIC_WEBAPP_URL=https://cal.yapping.me

ENV DATABASE_URL=$DATABASE_URL
ENV DATABASE_DIRECT_URL=$DATABASE_DIRECT_URL
ENV NEXTAUTH_SECRET=$NEXTAUTH_SECRET
ENV NEXTAUTH_URL=$NEXTAUTH_URL
ENV CALENDSO_ENCRYPTION_KEY=$CALENDSO_ENCRYPTION_KEY
ENV ENCRYPTION_KEY=$ENCRYPTION_KEY
ENV JWT_SECRET=$JWT_SECRET
ENV CRON_API_KEY=$CRON_API_KEY
ENV EMAIL_FROM=$EMAIL_FROM
ENV NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL
ENV CALCOM_TELEMETRY_DISABLED=1
ENV TURBO_TELEMETRY_DISABLED=1
ENV NEXT_TELEMETRY_DISABLED=1
ENV DO_NOT_TRACK=1
ENV ORGANIZATIONS_ENABLED=false
ENV GOOGLE_LOGIN_ENABLED=true
ENV CALCOM_LICENSE_KEY=development
ENV DISABLE_LICENSE_CHECK=true
ENV IS_CALCOM_DOCKER=true
ENV SKIP_LICENSE_CHECK=true
ENV ORGANIZATIONS_ENABLED=1
ENV NEXT_PUBLIC_ORG_SELF_SERVE_ENABLED=1


# Generate Prisma client with high memory allocation
RUN NODE_OPTIONS="--max-old-space-size=8192" yarn prisma generate

# Build the application with maximum resources
RUN NODE_OPTIONS="--max-old-space-size=8192" NEXT_BUILD_EXCLUDE_TEST_FILES=true yarn turbo run build --filter=@calcom/web --concurrency=1

# Production stage
FROM base AS production

# Create a non-root user
RUN groupadd --system --gid 1001 nodejs && \
    useradd --system --uid 1001 --gid 1001 nextjs

# Copy only essential files from build stage
COPY --from=build --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=build --chown=nextjs:nodejs /app/yarn.lock ./yarn.lock
COPY --from=build --chown=nextjs:nodejs /app/turbo.json ./turbo.json
COPY --from=build --chown=nextjs:nodejs /app/.yarn ./.yarn
COPY --from=build --chown=nextjs:nodejs /app/.yarnrc.yml ./.yarnrc.yml

# Copy built packages
COPY --from=build --chown=nextjs:nodejs /app/packages ./packages

# Copy built web application
COPY --from=build --chown=nextjs:nodejs /app/apps/web ./apps/web

# Copy entrypoint script and make it executable
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh && chown nextjs:nodejs /entrypoint.sh

# Switch to non-root user
USER nextjs

# Set working directory to web app
WORKDIR /app/apps/web

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use entrypoint script to set environment variables
ENTRYPOINT ["/entrypoint.sh"]

# Start the server
CMD ["yarn", "start"]
